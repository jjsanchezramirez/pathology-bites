[
  {
    "object_type": "tables",
    "data": [
      {
        "schemaname": "public",
        "tablename": "audit_logs",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 65536,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "event_type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 50,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_email",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "ip_address",
            "data_type": "inet",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_agent",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "risk_level",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "details",
            "data_type": "jsonb",
            "is_nullable": "NO",
            "column_default": "'{}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "metadata",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "categories",
        "tableowner": "postgres",
        "row_count": 27,
        "size_bytes": 49152,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "name",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "parent_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "categories",
            "foreign_column": "id"
          },
          {
            "column_name": "level",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "1",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "color",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 7,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "short_form",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "demo_questions",
        "tableowner": "postgres",
        "row_count": 5,
        "size_bytes": 57344,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "is_active",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "true",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "display_order",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "email_change_requests",
        "tableowner": "postgres",
        "row_count": 0,
        "size_bytes": 81920,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "old_email",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "new_email",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "change_token",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "expires_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": "'pending_old_email_verification'::text",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "old_email_verified_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "new_email_verified_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "completed_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "images",
        "tableowner": "postgres",
        "row_count": 76,
        "size_bytes": 278528,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "url",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "storage_path",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "file_type",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": "auth.uid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "alt_text",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "category",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "source_ref",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "search_vector",
            "data_type": "tsvector",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "file_size_bytes",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "width",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "height",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 14,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "inquiries",
        "tableowner": "postgres",
        "row_count": 0,
        "size_bytes": 32768,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "request_type",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "first_name",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "last_name",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "organization",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "email",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "inquiry",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "notification_states",
        "tableowner": "postgres",
        "row_count": 1,
        "size_bytes": 65536,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "source_type",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "source_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "read",
            "data_type": "boolean",
            "is_nullable": "NO",
            "column_default": "false",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "performance_analytics",
        "tableowner": "postgres",
        "row_count": 0,
        "size_bytes": 32768,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "categories",
            "foreign_column": "id"
          },
          {
            "column_name": "total_questions",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "questions_answered",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "correct_answers",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "average_time",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "peer_rank",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 5,
            "numeric_scale": 2,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "last_attempt_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_analytics",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 90112,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "total_attempts",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "correct_attempts",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "avg_time_spent",
            "data_type": "interval",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "median_time_spent",
            "data_type": "interval",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "success_rate",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 5,
            "numeric_scale": 4,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "difficulty_score",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 3,
            "numeric_scale": 2,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "flag_count",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "review_count",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "last_calculated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_flags",
        "tableowner": "postgres",
        "row_count": 3,
        "size_bytes": 98304,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "flagged_by",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "flag_type",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": "'open'::text",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "resolved_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "resolved_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "resolution_notes",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "resolution_type",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_images",
        "tableowner": "postgres",
        "row_count": 14,
        "size_bytes": 90112,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "image_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": true,
            "is_foreign_key": true,
            "foreign_table": "images",
            "foreign_column": "id"
          },
          {
            "column_name": "question_section",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "order_index",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_options",
        "tableowner": "postgres",
        "row_count": 13,
        "size_bytes": 98304,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "text",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "is_correct",
            "data_type": "boolean",
            "is_nullable": "NO",
            "column_default": "false",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "explanation",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "order_index",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_reports",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 81920,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "reported_by",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "report_type",
            "data_type": "USER-DEFINED",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": "'pending'::character varying",
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_reviews",
        "tableowner": "postgres",
        "row_count": 20,
        "size_bytes": 81920,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "reviewer_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "action",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "feedback",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "changes_made",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_tags",
        "tableowner": "postgres",
        "row_count": 16,
        "size_bytes": 73728,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "tag_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": true,
            "is_foreign_key": true,
            "foreign_table": "tags",
            "foreign_column": "id"
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "question_versions",
        "tableowner": "postgres",
        "row_count": 17,
        "size_bytes": 163840,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_data",
            "data_type": "jsonb",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "update_type",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "change_summary",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "changed_by",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "questions",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 229376,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "stem",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "difficulty",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "teaching_point",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_references",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": "'draft'::character varying",
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "version",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "1",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "question_set_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "sets",
            "foreign_column": "id"
          },
          {
            "column_name": "search_vector",
            "data_type": "tsvector",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "categories",
            "foreign_column": "id"
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "1",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 20,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 21,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 22,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 23,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_by",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 28,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "is_flagged",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "false",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 29,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "flag_count",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 30,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_attempts",
        "tableowner": "postgres",
        "row_count": 22,
        "size_bytes": 172032,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "quiz_session_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "quiz_sessions",
            "foreign_column": "id"
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "selected_answer_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "question_options",
            "foreign_column": "id"
          },
          {
            "column_name": "is_correct",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "time_spent",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "attempted_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "NO",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "reviewed_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "first_answer_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "question_options",
            "foreign_column": "id"
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "categories",
            "foreign_column": "id"
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_sessions",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 139264,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "config",
            "data_type": "jsonb",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "questions",
            "data_type": "ARRAY",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "current_question_index",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": "'not_started'::character varying",
            "character_maximum_length": 50,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "started_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "completed_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "total_time_spent",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "score",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "correct_answers",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "total_questions",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 15,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "total_time_limit",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 16,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "time_remaining",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 17,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "quiz_started_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "sets",
        "tableowner": "postgres",
        "row_count": 2,
        "size_bytes": 81920,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "name",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "source_type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 50,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "source_details",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "is_active",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "true",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp without time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp without time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "short_form",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "tags",
        "tableowner": "postgres",
        "row_count": 29,
        "size_bytes": 40960,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "name",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 50,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "user_activities",
        "tableowner": "postgres",
        "row_count": 8,
        "size_bytes": 65536,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 50,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "title",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "group_key",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "quiz_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "quiz_sessions",
            "foreign_column": "id"
          },
          {
            "column_name": "goal_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "subject_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "data",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "is_read",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "false",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "priority",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": "'medium'::character varying",
            "character_maximum_length": 10,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "user_favorites",
        "tableowner": "postgres",
        "row_count": -1,
        "size_bytes": 73728,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "question_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "questions",
            "foreign_column": "id"
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "user_goals",
        "tableowner": "postgres",
        "row_count": 3,
        "size_bytes": 49152,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "category",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "title",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "target_value",
            "data_type": "integer",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "current_value",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "unit",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "is_completed",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "false",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "completed_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "starts_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "ends_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "is_active",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": "true",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 15,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 16,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "user_settings",
        "tableowner": "postgres",
        "row_count": 13,
        "size_bytes": 98304,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "quiz_settings",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{\"default_mode\": \"tutor\", \"default_timing\": \"untimed\", \"default_question_type\": \"unused\", \"default_question_count\": 10, \"default_category_selection\": \"all\"}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "notification_settings",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{\"quiz_reminders\": true, \"marketing_emails\": false, \"progress_updates\": true, \"email_notifications\": true}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "ui_settings",
            "data_type": "jsonb",
            "is_nullable": "YES",
            "column_default": "'{\"theme\": \"system\", \"font_size\": \"medium\", \"sidebar_collapsed\": false}'::jsonb",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "user_study_activities",
        "tableowner": "postgres",
        "row_count": 0,
        "size_bytes": 16384,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "gen_random_uuid()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": true,
            "foreign_table": "users",
            "foreign_column": "id"
          },
          {
            "column_name": "date",
            "data_type": "date",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "questions_answered",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "quizzes_completed",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "time_spent",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "activities_count",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "accuracy",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 5,
            "numeric_scale": 2,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "streak_day",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": "0",
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "tableowner": "postgres",
        "row_count": 30,
        "size_bytes": 212992,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "email",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "first_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "last_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "role",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": "'active'::character varying",
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "institution",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "tableowner": "postgres",
        "row_count": 30,
        "size_bytes": 98304,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "email",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "first_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "last_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "role",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "user_type",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "NO",
            "column_default": "'active'::character varying",
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": "CURRENT_TIMESTAMP",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "institution",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      },
      {
        "schemaname": "public",
        "tablename": "waitlist",
        "tableowner": "postgres",
        "row_count": 50,
        "size_bytes": 49152,
        "table_type": "BASE TABLE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "NO",
            "column_default": "uuid_generate_v4()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1,
            "is_primary_key": true,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "email",
            "data_type": "text",
            "is_nullable": "NO",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "NO",
            "column_default": "now()",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          },
          {
            "column_name": "type",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": "'launch'::text",
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4,
            "is_primary_key": false,
            "is_foreign_key": false,
            "foreign_table": null,
            "foreign_column": null
          }
        ],
        "created_at": "2025-07-27T06:30:43.818011+00:00",
        "updated_at": "2025-07-27T06:30:43.818011+00:00"
      }
    ]
  },
  {
    "object_type": "views",
    "data": [
      {
        "view_name": "v_creator_questions",
        "view_schema": "public",
        "view_definition": " SELECT q.id,\n    q.title,\n    q.stem,\n    q.difficulty,\n    q.teaching_point,\n    q.question_references,\n    q.status,\n    q.created_by,\n    q.version,\n    q.created_at,\n    q.updated_at,\n    q.question_set_id,\n    q.category_id,\n    q.version_major,\n    q.version_minor,\n    q.version_patch,\n    q.version_string,\n    q.updated_by,\n    c.name AS category_name,\n    s.name AS question_set_name,\n    concat(u.first_name, ' ', u.last_name) AS creator_name,\n    u.email AS creator_email\n   FROM (((questions q\n     LEFT JOIN categories c ON ((q.category_id = c.id)))\n     LEFT JOIN sets s ON ((q.question_set_id = s.id)))\n     LEFT JOIN users u ON ((q.created_by = u.id)));",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "stem",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "difficulty",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "teaching_point",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "question_references",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          },
          {
            "column_name": "version",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11
          },
          {
            "column_name": "question_set_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 14
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 15
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 16
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 17
          },
          {
            "column_name": "updated_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18
          },
          {
            "column_name": "category_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19
          },
          {
            "column_name": "question_set_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 20
          },
          {
            "column_name": "creator_name",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 21
          },
          {
            "column_name": "creator_email",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 22
          }
        ]
      },
      {
        "view_name": "v_dashboard_stats",
        "view_schema": "public",
        "view_definition": " WITH question_stats AS (\n         SELECT count(*) FILTER (WHERE ((questions.status)::text = 'published'::text)) AS published_questions,\n            count(*) FILTER (WHERE ((questions.status)::text = 'draft'::text)) AS draft_questions,\n            count(*) FILTER (WHERE ((questions.status)::text = 'flagged'::text)) AS flagged_questions,\n            count(*) FILTER (WHERE (questions.created_at >= (CURRENT_DATE - '7 days'::interval))) AS recent_questions\n           FROM questions\n        ), user_stats AS (\n         SELECT count(*) AS total_users,\n            count(*) FILTER (WHERE (users.created_at >= (CURRENT_DATE - '30 days'::interval))) AS recent_users\n           FROM users\n        ), other_stats AS (\n         SELECT ( SELECT count(*) AS count\n                   FROM images\n                  WHERE ((images.category)::text <> 'external'::text)) AS total_images,\n            ( SELECT count(*) AS count\n                   FROM quiz_sessions) AS total_quiz_sessions,\n            ( SELECT count(*) FILTER (WHERE (quiz_sessions.created_at >= (CURRENT_DATE - '7 days'::interval))) AS count\n                   FROM quiz_sessions) AS recent_quiz_sessions,\n            ( SELECT count(*) AS count\n                   FROM inquiries) AS total_inquiries,\n            ( SELECT count(*) AS count\n                   FROM question_reports) AS question_reports,\n            ( SELECT count(*) FILTER (WHERE ((question_reports.status)::text = 'pending'::text)) AS count\n                   FROM question_reports) AS pending_reports\n        )\n SELECT q.published_questions,\n    q.draft_questions,\n    q.flagged_questions,\n    q.recent_questions,\n    u.total_users,\n    u.recent_users,\n    o.total_images,\n    o.total_quiz_sessions,\n    o.recent_quiz_sessions,\n    o.total_inquiries,\n    o.question_reports,\n    o.pending_reports,\n    now() AS last_updated\n   FROM question_stats q,\n    user_stats u,\n    other_stats o;",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "published_questions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 1
          },
          {
            "column_name": "draft_questions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 2
          },
          {
            "column_name": "flagged_questions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 3
          },
          {
            "column_name": "recent_questions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 4
          },
          {
            "column_name": "total_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 5
          },
          {
            "column_name": "recent_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 6
          },
          {
            "column_name": "total_images",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 7
          },
          {
            "column_name": "total_quiz_sessions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 8
          },
          {
            "column_name": "recent_quiz_sessions",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "total_inquiries",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 10
          },
          {
            "column_name": "question_reports",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 11
          },
          {
            "column_name": "pending_reports",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 12
          },
          {
            "column_name": "last_updated",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          }
        ]
      },
      {
        "view_name": "v_flagged_questions",
        "view_schema": "public",
        "view_definition": " SELECT q.id,\n    q.title,\n    q.stem,\n    q.difficulty,\n    q.teaching_point,\n    q.question_references,\n    q.status,\n    q.created_by,\n    q.version,\n    q.created_at,\n    q.updated_at,\n    q.question_set_id,\n    q.search_vector,\n    q.category_id,\n    q.version_major,\n    q.version_minor,\n    q.version_patch,\n    q.version_string,\n    q.updated_by,\n    q.is_flagged,\n    q.flag_count,\n    ( SELECT max(qf.created_at) AS max\n           FROM question_flags qf\n          WHERE ((qf.question_id = q.id) AND (qf.status = 'open'::text))) AS latest_flag_date\n   FROM questions q\n  WHERE (((q.status)::text = 'approved'::text) AND (q.is_flagged = true))\n  ORDER BY ( SELECT max(qf.created_at) AS max\n           FROM question_flags qf\n          WHERE ((qf.question_id = q.id) AND (qf.status = 'open'::text))) DESC;",
        "is_updatable": "YES",
        "is_insertable_into": "YES",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "stem",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "difficulty",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "teaching_point",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "question_references",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          },
          {
            "column_name": "version",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11
          },
          {
            "column_name": "question_set_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12
          },
          {
            "column_name": "search_vector",
            "data_type": "tsvector",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 15
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 16
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 17
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18
          },
          {
            "column_name": "updated_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19
          },
          {
            "column_name": "is_flagged",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 20
          },
          {
            "column_name": "flag_count",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 21
          },
          {
            "column_name": "latest_flag_date",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 22
          }
        ]
      },
      {
        "view_name": "v_image_usage_by_category",
        "view_schema": "public",
        "view_definition": " SELECT i.category,\n    count(*) AS total_images,\n    count(qi.image_id) AS used_images,\n    (count(*) - count(qi.image_id)) AS orphaned_images,\n    COALESCE(sum(i.file_size_bytes), (0)::numeric) AS total_size_bytes,\n    COALESCE(avg(i.file_size_bytes), (0)::numeric) AS avg_size_bytes,\n    round((((count(qi.image_id))::numeric / (count(*))::numeric) * (100)::numeric), 2) AS usage_percentage\n   FROM (images i\n     LEFT JOIN ( SELECT DISTINCT question_images.image_id\n           FROM question_images) qi ON ((i.id = qi.image_id)))\n  WHERE ((i.category)::text <> 'external'::text)\n  GROUP BY i.category\n  ORDER BY (count(*)) DESC;",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "category",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "total_images",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 2
          },
          {
            "column_name": "used_images",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 3
          },
          {
            "column_name": "orphaned_images",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 4
          },
          {
            "column_name": "total_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "avg_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6
          },
          {
            "column_name": "usage_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          }
        ]
      },
      {
        "view_name": "v_image_usage_stats",
        "view_schema": "public",
        "view_definition": " SELECT i.id,\n    i.url,\n    i.alt_text,\n    i.description,\n    i.category,\n    i.file_size_bytes,\n    i.width,\n    i.height,\n    i.created_at,\n    i.created_by,\n    i.source_ref,\n    COALESCE(qi.usage_count, (0)::bigint) AS usage_count,\n        CASE\n            WHEN ((qi.usage_count IS NULL) OR (qi.usage_count = 0)) THEN true\n            ELSE false\n        END AS is_orphaned,\n    COALESCE(qi.question_ids, ARRAY[]::uuid[]) AS question_ids\n   FROM (images i\n     LEFT JOIN ( SELECT question_images.image_id,\n            count(*) AS usage_count,\n            array_agg(DISTINCT question_images.question_id) AS question_ids\n           FROM question_images\n          GROUP BY question_images.image_id) qi ON ((i.id = qi.image_id)))\n  WHERE ((i.category)::text <> 'external'::text);",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "url",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "alt_text",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "category",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "file_size_bytes",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 6
          },
          {
            "column_name": "width",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 7
          },
          {
            "column_name": "height",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 8
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "source_ref",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11
          },
          {
            "column_name": "usage_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 12
          },
          {
            "column_name": "is_orphaned",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          },
          {
            "column_name": "question_ids",
            "data_type": "ARRAY",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14
          }
        ]
      },
      {
        "view_name": "v_orphaned_images",
        "view_schema": "public",
        "view_definition": " SELECT i.id,\n    i.url,\n    i.alt_text,\n    i.description,\n    i.category,\n    i.file_size_bytes,\n    i.storage_path,\n    i.created_at\n   FROM images i\n  WHERE (((i.category)::text <> 'external'::text) AND (NOT (i.id IN ( SELECT DISTINCT question_images.image_id\n           FROM question_images))));",
        "is_updatable": "YES",
        "is_insertable_into": "YES",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "url",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "alt_text",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "description",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "category",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "file_size_bytes",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 6
          },
          {
            "column_name": "storage_path",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          }
        ]
      },
      {
        "view_name": "v_review_queue",
        "view_schema": "public",
        "view_definition": " SELECT q.id,\n    q.title,\n    q.stem,\n    q.difficulty,\n    q.teaching_point,\n    q.question_references,\n    q.status,\n    q.created_by,\n    q.version,\n    q.created_at,\n    q.updated_at,\n    q.question_set_id,\n    q.search_vector,\n    q.category_id,\n    q.version_major,\n    q.version_minor,\n    q.version_patch,\n    q.version_string,\n    q.updated_by,\n    concat(u.first_name, ' ', u.last_name) AS creator_name,\n    u.email AS creator_email,\n    s.name AS question_set_name,\n    c.name AS category_name,\n    COALESCE(flag_stats.flag_count, (0)::bigint) AS flag_count,\n    flag_stats.latest_flag_date,\n        CASE\n            WHEN (((q.status)::text = 'under_review'::text) AND (COALESCE(flag_stats.flag_count, (0)::bigint) = 0)) THEN 'new_submission'::text\n            WHEN (((q.status)::text = 'published'::text) AND (COALESCE(flag_stats.flag_count, (0)::bigint) > 0)) THEN 'flagged_question'::text\n            ELSE 'other'::text\n        END AS review_type,\n        CASE\n            WHEN (COALESCE(flag_stats.flag_count, (0)::bigint) > 0) THEN (COALESCE(flag_stats.flag_count, (0)::bigint) * 10)\n            WHEN ((q.status)::text = 'under_review'::text) THEN (5)::bigint\n            ELSE (1)::bigint\n        END AS priority_score\n   FROM ((((questions q\n     LEFT JOIN users u ON ((q.created_by = u.id)))\n     LEFT JOIN sets s ON ((q.question_set_id = s.id)))\n     LEFT JOIN categories c ON ((q.category_id = c.id)))\n     LEFT JOIN ( SELECT question_flags.question_id,\n            count(*) AS flag_count,\n            max(question_flags.created_at) AS latest_flag_date\n           FROM question_flags\n          WHERE (question_flags.status = 'open'::text)\n          GROUP BY question_flags.question_id) flag_stats ON ((q.id = flag_stats.question_id)))\n  WHERE (((q.status)::text = 'under_review'::text) OR (((q.status)::text = 'published'::text) AND (COALESCE(flag_stats.flag_count, (0)::bigint) > 0)));",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "stem",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "difficulty",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "teaching_point",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "question_references",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          },
          {
            "column_name": "version",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11
          },
          {
            "column_name": "question_set_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12
          },
          {
            "column_name": "search_vector",
            "data_type": "tsvector",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 15
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 16
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 17
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18
          },
          {
            "column_name": "updated_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19
          },
          {
            "column_name": "creator_name",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 20
          },
          {
            "column_name": "creator_email",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 21
          },
          {
            "column_name": "question_set_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 22
          },
          {
            "column_name": "category_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 100,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 23
          },
          {
            "column_name": "flag_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 24
          },
          {
            "column_name": "latest_flag_date",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 25
          },
          {
            "column_name": "review_type",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 26
          },
          {
            "column_name": "priority_score",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 27
          }
        ]
      },
      {
        "view_name": "v_simplified_review_queue",
        "view_schema": "public",
        "view_definition": " SELECT q.id,\n    q.title,\n    q.stem,\n    q.difficulty,\n    q.teaching_point,\n    q.question_references,\n    q.status,\n    q.created_by,\n    q.version,\n    q.created_at,\n    q.updated_at,\n    q.question_set_id,\n    q.search_vector,\n    q.category_id,\n    q.version_major,\n    q.version_minor,\n    q.version_patch,\n    q.version_string,\n    q.updated_by,\n    q.is_flagged,\n    q.flag_count,\n    (((u.first_name)::text || ' '::text) || (u.last_name)::text) AS creator_name,\n    u.email AS creator_email,\n    s.name AS question_set_name,\n        CASE\n            WHEN ((q.status)::text = 'pending'::text) THEN 'new_submission'::text\n            WHEN ((q.status)::text = 'flagged'::text) THEN 'flagged_question'::text\n            ELSE 'other'::text\n        END AS review_type,\n        CASE\n            WHEN ((q.status)::text = 'flagged'::text) THEN 100\n            WHEN (((q.status)::text = 'pending'::text) AND (q.created_at > (now() - '24:00:00'::interval))) THEN 80\n            WHEN ((q.status)::text = 'pending'::text) THEN 60\n            ELSE 0\n        END AS priority_score,\n    ( SELECT max(qf.created_at) AS max\n           FROM question_flags qf\n          WHERE ((qf.question_id = q.id) AND (qf.status = 'open'::text))) AS latest_flag_date\n   FROM ((questions q\n     LEFT JOIN users u ON ((q.created_by = u.id)))\n     LEFT JOIN sets s ON ((q.question_set_id = s.id)))\n  WHERE ((q.status)::text = ANY (ARRAY[('pending'::character varying)::text, ('flagged'::character varying)::text]))\n  ORDER BY\n        CASE\n            WHEN ((q.status)::text = 'flagged'::text) THEN 100\n            WHEN (((q.status)::text = 'pending'::text) AND (q.created_at > (now() - '24:00:00'::interval))) THEN 80\n            WHEN ((q.status)::text = 'pending'::text) THEN 60\n            ELSE 0\n        END DESC, q.created_at;",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 1
          },
          {
            "column_name": "title",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "stem",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 3
          },
          {
            "column_name": "difficulty",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 4
          },
          {
            "column_name": "teaching_point",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 5
          },
          {
            "column_name": "question_references",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 6
          },
          {
            "column_name": "status",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 20,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "created_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          },
          {
            "column_name": "version",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "created_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "updated_at",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 11
          },
          {
            "column_name": "question_set_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12
          },
          {
            "column_name": "search_vector",
            "data_type": "tsvector",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 13
          },
          {
            "column_name": "category_id",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 14
          },
          {
            "column_name": "version_major",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 15
          },
          {
            "column_name": "version_minor",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 16
          },
          {
            "column_name": "version_patch",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 17
          },
          {
            "column_name": "version_string",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18
          },
          {
            "column_name": "updated_by",
            "data_type": "uuid",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19
          },
          {
            "column_name": "is_flagged",
            "data_type": "boolean",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 20
          },
          {
            "column_name": "flag_count",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 21
          },
          {
            "column_name": "creator_name",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 22
          },
          {
            "column_name": "creator_email",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 23
          },
          {
            "column_name": "question_set_name",
            "data_type": "character varying",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": 255,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 24
          },
          {
            "column_name": "review_type",
            "data_type": "text",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 25
          },
          {
            "column_name": "priority_score",
            "data_type": "integer",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 32,
            "numeric_scale": 0,
            "ordinal_position": 26
          },
          {
            "column_name": "latest_flag_date",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 27
          }
        ]
      },
      {
        "view_name": "v_storage_stats",
        "view_schema": "public",
        "view_definition": " SELECT count(*) AS total_images,\n    COALESCE(sum(images.file_size_bytes), (0)::numeric) AS total_size_bytes,\n    count(*) FILTER (WHERE ((images.category)::text = 'microscopic'::text)) AS microscopic_count,\n    count(*) FILTER (WHERE ((images.category)::text = 'gross'::text)) AS gross_count,\n    count(*) FILTER (WHERE ((images.category)::text = 'figure'::text)) AS figure_count,\n    count(*) FILTER (WHERE ((images.category)::text = 'table'::text)) AS table_count,\n    COALESCE(sum(images.file_size_bytes) FILTER (WHERE ((images.category)::text = 'microscopic'::text)), (0)::numeric) AS microscopic_size_bytes,\n    COALESCE(sum(images.file_size_bytes) FILTER (WHERE ((images.category)::text = 'gross'::text)), (0)::numeric) AS gross_size_bytes,\n    COALESCE(sum(images.file_size_bytes) FILTER (WHERE ((images.category)::text = 'figure'::text)), (0)::numeric) AS figure_size_bytes,\n    COALESCE(sum(images.file_size_bytes) FILTER (WHERE ((images.category)::text = 'table'::text)), (0)::numeric) AS table_size_bytes,\n    count(*) FILTER (WHERE (NOT (images.id IN ( SELECT DISTINCT question_images.image_id\n           FROM question_images)))) AS orphaned_count,\n    COALESCE(sum(images.file_size_bytes) FILTER (WHERE (NOT (images.id IN ( SELECT DISTINCT question_images.image_id\n           FROM question_images)))), (0)::numeric) AS orphaned_size_bytes\n   FROM images\n  WHERE ((images.category)::text <> 'external'::text);",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "total_images",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 1
          },
          {
            "column_name": "total_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 2
          },
          {
            "column_name": "microscopic_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 3
          },
          {
            "column_name": "gross_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 4
          },
          {
            "column_name": "figure_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 5
          },
          {
            "column_name": "table_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 6
          },
          {
            "column_name": "microscopic_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 7
          },
          {
            "column_name": "gross_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 8
          },
          {
            "column_name": "figure_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 9
          },
          {
            "column_name": "table_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 10
          },
          {
            "column_name": "orphaned_count",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 11
          },
          {
            "column_name": "orphaned_size_bytes",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 12
          }
        ]
      },
      {
        "view_name": "v_user_stats",
        "view_schema": "public",
        "view_definition": " WITH user_counts AS (\n         SELECT count(*) AS total_users,\n            count(*) FILTER (WHERE ((users.status)::text = 'active'::text)) AS active_users,\n            count(*) FILTER (WHERE ((users.status)::text = 'inactive'::text)) AS inactive_users,\n            count(*) FILTER (WHERE ((users.status)::text = 'suspended'::text)) AS suspended_users,\n            count(*) FILTER (WHERE (users.created_at >= (CURRENT_DATE - '30 days'::interval))) AS recent_users,\n            count(*) FILTER (WHERE ((users.role)::text = ANY ((ARRAY['admin'::character varying, 'creator'::character varying, 'reviewer'::character varying])::text[]))) AS internal_users,\n            count(*) FILTER (WHERE ((users.role)::text = 'user'::text)) AS end_users,\n            count(*) FILTER (WHERE (((users.role)::text = ANY ((ARRAY['admin'::character varying, 'creator'::character varying, 'reviewer'::character varying])::text[])) AND ((users.status)::text = 'active'::text))) AS active_internal_users,\n            count(*) FILTER (WHERE (((users.role)::text = 'user'::text) AND ((users.status)::text = 'active'::text))) AS active_end_users\n           FROM users\n        ), role_breakdown AS (\n         SELECT count(*) FILTER (WHERE ((users.role)::text = 'admin'::text)) AS total_admins,\n            count(*) FILTER (WHERE ((users.role)::text = 'creator'::text)) AS total_creators,\n            count(*) FILTER (WHERE ((users.role)::text = 'reviewer'::text)) AS total_reviewers,\n            count(*) FILTER (WHERE (((users.role)::text = 'admin'::text) AND ((users.status)::text = 'active'::text))) AS active_admins,\n            count(*) FILTER (WHERE (((users.role)::text = 'creator'::text) AND ((users.status)::text = 'active'::text))) AS active_creators,\n            count(*) FILTER (WHERE (((users.role)::text = 'reviewer'::text) AND ((users.status)::text = 'active'::text))) AS active_reviewers\n           FROM users\n        )\n SELECT uc.total_users,\n    uc.active_users,\n    uc.inactive_users,\n    uc.suspended_users,\n    uc.recent_users,\n    uc.internal_users,\n    uc.end_users,\n    uc.active_internal_users,\n    uc.active_end_users,\n    rb.total_admins,\n    rb.total_creators,\n    rb.total_reviewers,\n    rb.active_admins,\n    rb.active_creators,\n    rb.active_reviewers,\n        CASE\n            WHEN (uc.total_users > 0) THEN round((((uc.active_users)::numeric / (uc.total_users)::numeric) * (100)::numeric), 1)\n            ELSE (0)::numeric\n        END AS active_percentage,\n        CASE\n            WHEN (uc.total_users > 0) THEN round((((uc.inactive_users)::numeric / (uc.total_users)::numeric) * (100)::numeric), 1)\n            ELSE (0)::numeric\n        END AS inactive_percentage,\n        CASE\n            WHEN (uc.total_users > 0) THEN round((((uc.suspended_users)::numeric / (uc.total_users)::numeric) * (100)::numeric), 1)\n            ELSE (0)::numeric\n        END AS suspended_percentage,\n        CASE\n            WHEN (uc.total_users > 0) THEN round((((uc.internal_users)::numeric / (uc.total_users)::numeric) * (100)::numeric), 1)\n            ELSE (0)::numeric\n        END AS internal_percentage,\n        CASE\n            WHEN (uc.total_users > 0) THEN round((((uc.end_users)::numeric / (uc.total_users)::numeric) * (100)::numeric), 1)\n            ELSE (0)::numeric\n        END AS end_users_percentage,\n    now() AS last_updated\n   FROM user_counts uc,\n    role_breakdown rb;",
        "is_updatable": "NO",
        "is_insertable_into": "NO",
        "check_option": "NONE",
        "columns": [
          {
            "column_name": "total_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 1
          },
          {
            "column_name": "active_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 2
          },
          {
            "column_name": "inactive_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 3
          },
          {
            "column_name": "suspended_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 4
          },
          {
            "column_name": "recent_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 5
          },
          {
            "column_name": "internal_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 6
          },
          {
            "column_name": "end_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 7
          },
          {
            "column_name": "active_internal_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 8
          },
          {
            "column_name": "active_end_users",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 9
          },
          {
            "column_name": "total_admins",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 10
          },
          {
            "column_name": "total_creators",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 11
          },
          {
            "column_name": "total_reviewers",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 12
          },
          {
            "column_name": "active_admins",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 13
          },
          {
            "column_name": "active_creators",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 14
          },
          {
            "column_name": "active_reviewers",
            "data_type": "bigint",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": 64,
            "numeric_scale": 0,
            "ordinal_position": 15
          },
          {
            "column_name": "active_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 16
          },
          {
            "column_name": "inactive_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 17
          },
          {
            "column_name": "suspended_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 18
          },
          {
            "column_name": "internal_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 19
          },
          {
            "column_name": "end_users_percentage",
            "data_type": "numeric",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 20
          },
          {
            "column_name": "last_updated",
            "data_type": "timestamp with time zone",
            "is_nullable": "YES",
            "column_default": null,
            "character_maximum_length": null,
            "numeric_precision": null,
            "numeric_scale": null,
            "ordinal_position": 21
          }
        ]
      }
    ]
  },
  {
    "object_type": "functions",
    "data": [
      {
        "routine_name": "calculate_question_analytics",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "void",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    IF question_id_param IS NULL THEN\n        -- Update all questions (original no-param behavior)\n        UPDATE question_analytics qa\n        SET \n            total_attempts = stats.total_attempts,\n            correct_attempts = stats.correct_attempts,\n            success_rate = CASE \n                WHEN stats.total_attempts > 0 \n                THEN stats.correct_attempts::float / stats.total_attempts::float \n                ELSE 0 \n            END,\n            difficulty_score = CASE \n                WHEN stats.total_attempts > 0 \n                THEN 1.0 - (stats.correct_attempts::float / stats.total_attempts::float)\n                ELSE 0 \n            END,\n            last_calculated_at = NOW()\n        FROM (\n            SELECT \n                question_id,\n                COUNT(*) as total_attempts,\n                COUNT(*) FILTER (WHERE is_correct = true) as correct_attempts\n            FROM quiz_attempts\n            GROUP BY question_id\n        ) stats\n        WHERE qa.question_id = stats.question_id;\n    ELSE\n        -- Update specific question (original with-param behavior)\n        UPDATE question_analytics qa\n        SET \n            total_attempts = COALESCE(stats.total_attempts, 0),\n            correct_attempts = COALESCE(stats.correct_attempts, 0),\n            success_rate = CASE \n                WHEN COALESCE(stats.total_attempts, 0) > 0 \n                THEN COALESCE(stats.correct_attempts, 0)::float / stats.total_attempts::float \n                ELSE 0 \n            END,\n            difficulty_score = CASE \n                WHEN COALESCE(stats.total_attempts, 0) > 0 \n                THEN 1.0 - (COALESCE(stats.correct_attempts, 0)::float / stats.total_attempts::float)\n                ELSE 0 \n            END,\n            last_calculated_at = NOW()\n        FROM (\n            SELECT \n                question_id,\n                COUNT(*) as total_attempts,\n                COUNT(*) FILTER (WHERE is_correct = true) as correct_attempts\n            FROM quiz_attempts\n            WHERE question_id = question_id_param\n            GROUP BY question_id\n        ) stats\n        WHERE qa.question_id = question_id_param;\n    END IF;\nEND;\n",
        "parameters": [
          {
            "parameter_name": "question_id_param",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          }
        ],
        "parameter_count": 1,
        "is_trigger_function": false,
        "description": "FUNCTION calculate_question_analytics returns void (SECURITY DEFINER)"
      },
      {
        "routine_name": "calculate_question_analytics",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "void",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Update question analytics based on quiz attempts\n    UPDATE public.question_analytics qa\n    SET \n        total_attempts = stats.total_attempts,\n        correct_attempts = stats.correct_attempts,\n        success_rate = CASE \n            WHEN stats.total_attempts > 0 \n            THEN stats.correct_attempts::float / stats.total_attempts::float \n            ELSE 0 \n        END,\n        difficulty_score = CASE \n            WHEN stats.total_attempts > 0 \n            THEN 1.0 - (stats.correct_attempts::float / stats.total_attempts::float)\n            ELSE 0 \n        END,\n        last_calculated_at = NOW()\n    FROM (\n        SELECT \n            question_id,\n            COUNT(*) as total_attempts,\n            COUNT(*) FILTER (WHERE is_correct = true) as correct_attempts\n        FROM public.quiz_attempts\n        GROUP BY question_id\n    ) stats\n    WHERE qa.question_id = stats.question_id;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": false,
        "description": "FUNCTION calculate_question_analytics returns void (SECURITY DEFINER)"
      },
      {
        "routine_name": "calculate_quiz_attempt_correctness",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Calculate correctness based on selected answer\n    NEW.is_correct := COALESCE(\n        (SELECT qo.is_correct \n         FROM question_options qo \n         WHERE qo.id = NEW.selected_answer_id), \n        false\n    );\n    \n    RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION calculate_quiz_attempt_correctness returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "create_question_version_simplified",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "uuid",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nDECLARE\n  current_major INTEGER;\n  current_minor INTEGER;\n  current_patch INTEGER;\n  new_minor INTEGER;\n  new_patch INTEGER;\n  question_data JSONB;\n  version_id UUID;\nBEGIN\n  -- Get current version numbers\n  SELECT version_major, version_minor, version_patch\n  INTO current_major, current_minor, current_patch\n  FROM questions\n  WHERE id = question_id_param;\n  \n  IF NOT FOUND THEN\n    RAISE EXCEPTION 'Question not found';\n  END IF;\n  \n  -- Simple versioning: just increment minor version for all changes\n  -- This eliminates the complexity of choosing between patch/minor/major\n  new_minor := current_minor + 1;\n  new_patch := 0;\n  \n  -- Update question version numbers\n  UPDATE questions\n  SET \n    version_minor = new_minor,\n    version_patch = new_patch,\n    updated_at = NOW(),\n    updated_by = COALESCE(changed_by_param, auth.uid())\n  WHERE id = question_id_param;\n  \n  -- Get complete question data for snapshot\n  SELECT get_question_snapshot_data(question_id_param) INTO question_data;\n  \n  -- Create version snapshot with simplified update type\n  INSERT INTO question_versions (\n    question_id,\n    version_major,\n    version_minor,\n    version_patch,\n    version_string,\n    question_data,\n    update_type,\n    change_summary,\n    changed_by\n  ) VALUES (\n    question_id_param,\n    current_major,\n    new_minor,\n    new_patch,\n    current_major || '.' || new_minor || '.' || new_patch,\n    question_data,\n    'minor', -- All changes are treated as minor updates\n    change_summary_param,\n    COALESCE(changed_by_param, auth.uid())\n  ) RETURNING id INTO version_id;\n  \n  RETURN version_id;\nEND ",
        "parameters": [
          {
            "parameter_name": "question_id_param",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          },
          {
            "parameter_name": "change_summary_param",
            "parameter_mode": "IN",
            "data_type": "text",
            "ordinal_position": 2
          },
          {
            "parameter_name": "changed_by_param",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 3
          }
        ],
        "parameter_count": 3,
        "is_trigger_function": false,
        "description": "FUNCTION create_question_version_simplified returns uuid (SECURITY DEFINER)"
      },
      {
        "routine_name": "create_user_settings_for_new_user",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    INSERT INTO public.user_settings (user_id, settings)\n    VALUES (NEW.id, '{}'::jsonb);\n    \n    RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION create_user_settings_for_new_user returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "get_question_snapshot_data",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "jsonb",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nDECLARE\n  question_data JSONB;\nBEGIN\n  SELECT jsonb_build_object(\n    'title', q.title,\n    'stem', q.stem,\n    'difficulty', q.difficulty,\n    'teaching_point', q.teaching_point,\n    'question_references', q.question_references,\n    'status', q.status,\n    'question_set_id', q.question_set_id,\n    'category_id', q.category_id,\n    'answer_options', COALESCE(qo.options, '[]'::jsonb),\n    'question_images', COALESCE(qi.images, '[]'::jsonb),\n    'tag_ids', COALESCE(qt.tag_ids, '[]'::jsonb)\n  ) INTO question_data\n  FROM questions q\n  LEFT JOIN (\n    SELECT \n      question_id, \n      jsonb_agg(\n        jsonb_build_object(\n          'text', text,\n          'is_correct', is_correct,\n          'explanation', explanation,\n          'order_index', order_index\n        ) ORDER BY order_index\n      ) as options\n    FROM question_options\n    GROUP BY question_id\n  ) qo ON q.id = qo.question_id\n  LEFT JOIN (\n    SELECT \n      qi.question_id, \n      jsonb_agg(\n        jsonb_build_object(\n          'image_id', qi.image_id,\n          'question_section', qi.question_section,\n          'order_index', qi.order_index\n        ) ORDER BY qi.order_index\n      ) as images\n    FROM question_images qi\n    GROUP BY qi.question_id\n  ) qi ON q.id = qi.question_id\n  LEFT JOIN (\n    SELECT \n      qt.question_id, \n      jsonb_agg(qt.tag_id) as tag_ids\n    FROM question_tags qt\n    GROUP BY qt.question_id\n  ) qt ON q.id = qt.question_id\n  WHERE q.id = question_id_param;\n\n  RETURN question_data;\nEND ",
        "parameters": [
          {
            "parameter_name": "question_id_param",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          }
        ],
        "parameter_count": 1,
        "is_trigger_function": false,
        "description": "FUNCTION get_question_snapshot_data returns jsonb (SECURITY DEFINER)"
      },
      {
        "routine_name": "get_user_category_stats",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "record",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Check if user is requesting their own stats or is an admin\n    IF p_user_id IS NOT NULL AND p_user_id != auth.uid() THEN\n        -- Check if current user is admin\n        IF NOT EXISTS (\n            SELECT 1 FROM public.users \n            WHERE id = auth.uid() \n            AND role IN ('admin')\n        ) THEN\n            RAISE EXCEPTION 'Access denied: You can only view your own statistics';\n        END IF;\n    END IF;\n    \n    -- Return stats for specified user or current user\n    RETURN QUERY\n    SELECT \n        ucs.user_id,\n        ucs.category_id,\n        ucs.total_attempts,\n        ucs.correct_attempts,\n        ucs.incorrect_attempts,\n        ucs.last_attempt_at,\n        ucs.unique_questions_attempted\n    FROM public.user_category_stats ucs\n    WHERE ucs.user_id = COALESCE(p_user_id, auth.uid());\nEND;\n",
        "parameters": [
          {
            "parameter_name": "p_user_id",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          },
          {
            "parameter_name": "user_id",
            "parameter_mode": "OUT",
            "data_type": "uuid",
            "ordinal_position": 2
          },
          {
            "parameter_name": "category_id",
            "parameter_mode": "OUT",
            "data_type": "uuid",
            "ordinal_position": 3
          },
          {
            "parameter_name": "total_attempts",
            "parameter_mode": "OUT",
            "data_type": "bigint",
            "ordinal_position": 4
          },
          {
            "parameter_name": "correct_attempts",
            "parameter_mode": "OUT",
            "data_type": "bigint",
            "ordinal_position": 5
          },
          {
            "parameter_name": "incorrect_attempts",
            "parameter_mode": "OUT",
            "data_type": "bigint",
            "ordinal_position": 6
          },
          {
            "parameter_name": "last_attempt_at",
            "parameter_mode": "OUT",
            "data_type": "timestamp with time zone",
            "ordinal_position": 7
          },
          {
            "parameter_name": "unique_questions_attempted",
            "parameter_mode": "OUT",
            "data_type": "bigint",
            "ordinal_position": 8
          }
        ],
        "parameter_count": 8,
        "is_trigger_function": false,
        "description": "FUNCTION get_user_category_stats returns record (SECURITY DEFINER)"
      },
      {
        "routine_name": "handle_deleted_question",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Clean up related data when a question is deleted\n    DELETE FROM quiz_attempts WHERE question_id = OLD.id;\n    DELETE FROM question_analytics WHERE question_id = OLD.id;\n    DELETE FROM question_flags WHERE question_id = OLD.id;\n    DELETE FROM question_images WHERE question_id = OLD.id;\n    DELETE FROM question_tags WHERE question_id = OLD.id;\n    DELETE FROM question_versions WHERE question_id = OLD.id;\n    \n    RETURN OLD;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION handle_deleted_question returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "handle_deleted_user",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  -- Delete user record from public.users when auth user is deleted\n  DELETE FROM users WHERE id = OLD.id;\n  \n  -- Clean up audit logs (these should be deleted for privacy)\n  DELETE FROM audit_logs WHERE user_id = OLD.id;\n  \n  -- Note: Other related data is handled automatically by CASCADE constraints:\n  -- - quiz_sessions, quiz_attempts, performance_analytics (CASCADE)\n  -- - user_favorites, user_settings (CASCADE) \n  -- - question_reviews (CASCADE)\n  -- - questions.created_by, questions.updated_by (SET NULL)\n  -- - question_versions.changed_by (SET NULL)\n  -- - question_flags.flagged_by, question_flags.resolved_by (SET NULL)\n  -- - sets.created_by (SET NULL)\n  -- - images.created_by (SET NULL)\n  \n  RETURN OLD;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION handle_deleted_user returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "handle_new_user",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  -- Insert new user into users table\n  INSERT INTO users (\n    id,\n    email,\n    first_name,\n    last_name,\n    user_type,\n    institution,\n    role,\n    status,\n    created_at,\n    updated_at\n  )\n  VALUES (\n    NEW.id,\n    NEW.email,\n    COALESCE(NEW.raw_user_meta_data->>'first_name', ''),\n    COALESCE(NEW.raw_user_meta_data->>'last_name', ''),\n    COALESCE(NEW.raw_user_meta_data->>'user_type', 'student'),\n    COALESCE(NEW.raw_user_meta_data->>'institution', NULL),\n    'user', -- Default role\n    'active', -- Default status\n    NOW(),\n    NOW()\n  );\n  \n  RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION handle_new_user returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "is_current_user_admin",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "boolean",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM users \n    WHERE id = auth.uid() \n    AND role = 'admin'\n  );\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": false,
        "description": "FUNCTION is_current_user_admin returns boolean (SECURITY DEFINER)"
      },
      {
        "routine_name": "recalculate_all_question_analytics",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "void",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nDECLARE\n  question_record RECORD;\nBEGIN\n  FOR question_record IN SELECT id FROM questions LOOP\n    PERFORM calculate_question_analytics(question_record.id);\n  END LOOP;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": false,
        "description": "FUNCTION recalculate_all_question_analytics returns void (SECURITY DEFINER)"
      },
      {
        "routine_name": "refresh_user_category_stats",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "void",
        "security_type": "INVOKER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": " BEGIN IF p_user_id IS NOT NULL THEN DELETE FROM user_category_stats WHERE user_id = p_user_id; INSERT INTO user_category_stats SELECT qa.user_id, qa.category_id, COUNT(*) as total_attempts, COUNT(*) FILTER (WHERE qa.is_correct = true) as correct_attempts, COUNT(*) FILTER (WHERE qa.is_correct = false) as incorrect_attempts, MAX(qa.created_at) as last_attempt_at, COUNT(DISTINCT qa.question_id) as unique_questions_attempted FROM quiz_attempts qa WHERE qa.user_id = p_user_id GROUP BY qa.user_id, qa.category_id; ELSE REFRESH MATERIALIZED VIEW CONCURRENTLY user_category_stats; END IF; END; ",
        "parameters": [
          {
            "parameter_name": "p_user_id",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          }
        ],
        "parameter_count": 1,
        "is_trigger_function": false,
        "description": "FUNCTION refresh_user_category_stats returns void"
      },
      {
        "routine_name": "set_quiz_attempt_denormalized_fields",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Set category_id from questions table\n    SELECT q.category_id INTO NEW.category_id\n    FROM questions q\n    WHERE q.id = NEW.question_id;\n    \n    -- Set user_id from quiz_sessions table\n    SELECT qs.user_id INTO NEW.user_id\n    FROM quiz_sessions qs\n    WHERE qs.id = NEW.quiz_session_id;\n    \n    RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION set_quiz_attempt_denormalized_fields returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "trigger_update_question_analytics_unified",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN\n    PERFORM calculate_question_analytics(NEW.question_id);\n    RETURN NEW;\n  ELSIF TG_OP = 'DELETE' THEN\n    PERFORM calculate_question_analytics(OLD.question_id);\n    RETURN OLD;\n  END IF;\n  RETURN NULL;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION trigger_update_question_analytics_unified returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_images_search_vector",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  NEW.search_vector := \n    setweight(to_tsvector('english', COALESCE(NEW.alt_text, '')), 'A') ||\n    setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B') ||\n    setweight(to_tsvector('english', COALESCE(NEW.source_ref, '')), 'C');\n  \n  RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION update_images_search_vector returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_question_flag_metadata",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  -- Update flag count and is_flagged status for the question\n  UPDATE questions \n  SET \n    flag_count = (\n      SELECT COUNT(*) \n      FROM question_flags \n      WHERE question_id = COALESCE(NEW.question_id, OLD.question_id)\n      AND status = 'open'\n    ),\n    is_flagged = EXISTS (\n      SELECT 1 \n      FROM question_flags \n      WHERE question_id = COALESCE(NEW.question_id, OLD.question_id)\n      AND status = 'open'\n    )\n  WHERE id = COALESCE(NEW.question_id, OLD.question_id);\n  \n  RETURN COALESCE(NEW, OLD);\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION update_question_flag_metadata returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_question_version",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "uuid",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nDECLARE\n  current_major INTEGER;\n  current_minor INTEGER;\n  current_patch INTEGER;\n  new_major INTEGER;\n  new_minor INTEGER;\n  new_patch INTEGER;\n  version_id UUID;\n  question_data JSONB;\nBEGIN\n  -- Get current version numbers\n  SELECT version_major, version_minor, version_patch\n  INTO current_major, current_minor, current_patch\n  FROM questions\n  WHERE id = question_id_param\n  FOR UPDATE;\n\n  -- Calculate new version numbers based on update type\n  CASE update_type_param\n    WHEN 'patch' THEN\n      new_major := current_major;\n      new_minor := current_minor;\n      new_patch := current_patch + 1;\n    WHEN 'minor' THEN\n      new_major := current_major;\n      new_minor := current_minor + 1;\n      new_patch := 0;\n    WHEN 'major' THEN\n      new_major := current_major + 1;\n      new_minor := 0;\n      new_patch := 0;\n    ELSE\n      RAISE EXCEPTION 'Invalid update type: %. Must be patch, minor, or major', update_type_param;\n  END CASE;\n\n  -- Update question version numbers only (removed redundant columns)\n  UPDATE questions SET\n    version_major = new_major,\n    version_minor = new_minor,\n    version_patch = new_patch,\n    updated_by = auth.uid(),\n    updated_at = NOW()\n  WHERE id = question_id_param;\n\n  -- Get complete question data for snapshot if not provided\n  IF question_data_param IS NULL THEN\n    SELECT get_question_snapshot_data(question_id_param) INTO question_data;\n  ELSE\n    question_data := question_data_param;\n  END IF;\n\n  -- Create version snapshot if question data provided\n  IF question_data IS NOT NULL THEN\n    INSERT INTO question_versions (\n      question_id,\n      version_major,\n      version_minor,\n      version_patch,\n      version_string,\n      question_data,\n      update_type,\n      change_summary,\n      changed_by\n    ) VALUES (\n      question_id_param,\n      new_major,\n      new_minor,\n      new_patch,\n      new_major || '.' || new_minor || '.' || new_patch,\n      question_data,\n      update_type_param,\n      change_summary_param,\n      auth.uid()\n    ) RETURNING id INTO version_id;\n  END IF;\n\n  RETURN version_id;\nEND ",
        "parameters": [
          {
            "parameter_name": "question_id_param",
            "parameter_mode": "IN",
            "data_type": "uuid",
            "ordinal_position": 1
          },
          {
            "parameter_name": "update_type_param",
            "parameter_mode": "IN",
            "data_type": "text",
            "ordinal_position": 2
          },
          {
            "parameter_name": "change_summary_param",
            "parameter_mode": "IN",
            "data_type": "text",
            "ordinal_position": 3
          },
          {
            "parameter_name": "question_data_param",
            "parameter_mode": "IN",
            "data_type": "jsonb",
            "ordinal_position": 4
          }
        ],
        "parameter_count": 4,
        "is_trigger_function": false,
        "description": "FUNCTION update_question_version returns uuid (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_questions_search_vector",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  NEW.search_vector := \n    setweight(to_tsvector('english', COALESCE(NEW.title, '')), 'A') ||\n    setweight(to_tsvector('english', COALESCE(NEW.stem, '')), 'B') ||\n    setweight(to_tsvector('english', COALESCE(NEW.teaching_point, '')), 'C') ||\n    setweight(to_tsvector('english', COALESCE(NEW.explanation, '')), 'D');\n  \n  RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION update_questions_search_vector returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_questions_updated_by",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": " BEGIN IF NEW.updated_by IS NULL THEN NEW.updated_by = COALESCE(auth.uid(), OLD.updated_by); END IF; NEW.updated_at = NOW(); RETURN NEW; END; ",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION update_questions_updated_by returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "update_updated_at_column",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION update_updated_at_column returns trigger (SECURITY DEFINER)"
      },
      {
        "routine_name": "validate_answer_correctness",
        "routine_schema": "public",
        "routine_type": "FUNCTION",
        "data_type": "trigger",
        "security_type": "DEFINER",
        "is_deterministic": "NO",
        "sql_data_access": "MODIFIES",
        "routine_definition": "\nBEGIN\n    -- Validate that is_correct matches the actual answer correctness\n    IF NEW.is_correct != COALESCE(\n        (SELECT qo.is_correct \n         FROM public.question_options qo \n         WHERE qo.id = NEW.selected_answer_id), \n        false\n    ) THEN\n        RAISE EXCEPTION 'Answer correctness validation failed';\n    END IF;\n    \n    RETURN NEW;\nEND;\n",
        "parameters": [],
        "parameter_count": 0,
        "is_trigger_function": true,
        "description": "FUNCTION validate_answer_correctness returns trigger (SECURITY DEFINER)"
      }
    ]
  },
  {
    "object_type": "triggers",
    "data": [
      {
        "trigger_name": "trigger_email_change_requests_updated_at",
        "event_manipulation": "UPDATE",
        "event_object_table": "email_change_requests",
        "action_statement": "EXECUTE FUNCTION update_updated_at_column()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on email_change_requests executing EXECUTE FUNCTION update_updated_at_column()"
      },
      {
        "trigger_name": "images_search_vector_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "images",
        "action_statement": "EXECUTE FUNCTION update_images_search_vector()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on images executing EXECUTE FUNCTION update_images_search_vector()"
      },
      {
        "trigger_name": "images_search_vector_trigger",
        "event_manipulation": "INSERT",
        "event_object_table": "images",
        "action_statement": "EXECUTE FUNCTION update_images_search_vector()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE INSERT trigger on images executing EXECUTE FUNCTION update_images_search_vector()"
      },
      {
        "trigger_name": "question_flags_analytics_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER UPDATE trigger on question_flags executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "question_flags_analytics_trigger",
        "event_manipulation": "DELETE",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER DELETE trigger on question_flags executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "question_flags_analytics_trigger",
        "event_manipulation": "INSERT",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER INSERT trigger on question_flags executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "trigger_update_question_flag_metadata",
        "event_manipulation": "DELETE",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION update_question_flag_metadata()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER DELETE trigger on question_flags executing EXECUTE FUNCTION update_question_flag_metadata()"
      },
      {
        "trigger_name": "trigger_update_question_flag_metadata",
        "event_manipulation": "UPDATE",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION update_question_flag_metadata()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER UPDATE trigger on question_flags executing EXECUTE FUNCTION update_question_flag_metadata()"
      },
      {
        "trigger_name": "trigger_update_question_flag_metadata",
        "event_manipulation": "INSERT",
        "event_object_table": "question_flags",
        "action_statement": "EXECUTE FUNCTION update_question_flag_metadata()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER INSERT trigger on question_flags executing EXECUTE FUNCTION update_question_flag_metadata()"
      },
      {
        "trigger_name": "question_reviews_analytics_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "question_reviews",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER UPDATE trigger on question_reviews executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "question_reviews_analytics_trigger",
        "event_manipulation": "INSERT",
        "event_object_table": "question_reviews",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER INSERT trigger on question_reviews executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "question_reviews_analytics_trigger",
        "event_manipulation": "DELETE",
        "event_object_table": "question_reviews",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER DELETE trigger on question_reviews executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "questions_delete_cleanup_trigger",
        "event_manipulation": "DELETE",
        "event_object_table": "questions",
        "action_statement": "EXECUTE FUNCTION handle_deleted_question()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE DELETE trigger on questions executing EXECUTE FUNCTION handle_deleted_question()"
      },
      {
        "trigger_name": "questions_updated_by_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "questions",
        "action_statement": "EXECUTE FUNCTION update_questions_updated_by()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on questions executing EXECUTE FUNCTION update_questions_updated_by()"
      },
      {
        "trigger_name": "quiz_attempt_correctness_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION calculate_quiz_attempt_correctness()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on quiz_attempts executing EXECUTE FUNCTION calculate_quiz_attempt_correctness()"
      },
      {
        "trigger_name": "quiz_attempt_correctness_trigger",
        "event_manipulation": "INSERT",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION calculate_quiz_attempt_correctness()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE INSERT trigger on quiz_attempts executing EXECUTE FUNCTION calculate_quiz_attempt_correctness()"
      },
      {
        "trigger_name": "quiz_attempts_analytics_trigger",
        "event_manipulation": "DELETE",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER DELETE trigger on quiz_attempts executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "quiz_attempts_analytics_trigger",
        "event_manipulation": "UPDATE",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER UPDATE trigger on quiz_attempts executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "quiz_attempts_analytics_trigger",
        "event_manipulation": "INSERT",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION trigger_update_question_analytics_unified()",
        "action_timing": "AFTER",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "AFTER INSERT trigger on quiz_attempts executing EXECUTE FUNCTION trigger_update_question_analytics_unified()"
      },
      {
        "trigger_name": "trigger_set_quiz_attempt_denormalized_fields",
        "event_manipulation": "INSERT",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION set_quiz_attempt_denormalized_fields()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE INSERT trigger on quiz_attempts executing EXECUTE FUNCTION set_quiz_attempt_denormalized_fields()"
      },
      {
        "trigger_name": "update_quiz_attempts_updated_at",
        "event_manipulation": "UPDATE",
        "event_object_table": "quiz_attempts",
        "action_statement": "EXECUTE FUNCTION update_updated_at_column()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on quiz_attempts executing EXECUTE FUNCTION update_updated_at_column()"
      },
      {
        "trigger_name": "update_quiz_sessions_updated_at",
        "event_manipulation": "UPDATE",
        "event_object_table": "quiz_sessions",
        "action_statement": "EXECUTE FUNCTION update_updated_at_column()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on quiz_sessions executing EXECUTE FUNCTION update_updated_at_column()"
      },
      {
        "trigger_name": "trigger_user_favorites_updated_at",
        "event_manipulation": "UPDATE",
        "event_object_table": "user_favorites",
        "action_statement": "EXECUTE FUNCTION update_updated_at_column()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on user_favorites executing EXECUTE FUNCTION update_updated_at_column()"
      },
      {
        "trigger_name": "trigger_user_settings_updated_at",
        "event_manipulation": "UPDATE",
        "event_object_table": "user_settings",
        "action_statement": "EXECUTE FUNCTION update_updated_at_column()",
        "action_timing": "BEFORE",
        "action_orientation": "ROW",
        "trigger_schema": "public",
        "description": "BEFORE UPDATE trigger on user_settings executing EXECUTE FUNCTION update_updated_at_column()"
      }
    ]
  },
  {
    "object_type": "policies",
    "data": [
      {
        "schemaname": "public",
        "tablename": "audit_logs",
        "policyname": "audit_logs_admin_select",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"audit_logs_admin_select\" on audit_logs for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "audit_logs",
        "policyname": "audit_logs_system_insert",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "false",
        "description": "PERMISSIVE policy \"audit_logs_system_insert\" on audit_logs for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "categories",
        "policyname": "Admin can delete categories",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete categories\" on categories for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "categories",
        "policyname": "Admin can manage categories",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can manage categories\" on categories for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "categories",
        "policyname": "Admin can update categories",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update categories\" on categories for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "categories",
        "policyname": "Categories read access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((( SELECT auth.role() AS role) = 'authenticated'::text) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Categories read access\" on categories for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "demo_questions",
        "policyname": "Allow authenticated users to delete demo questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(( SELECT auth.role() AS role) = 'authenticated'::text)",
        "with_check": null,
        "description": "PERMISSIVE policy \"Allow authenticated users to delete demo questions\" on demo_questions for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "demo_questions",
        "policyname": "Allow authenticated users to insert demo questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(( SELECT auth.role() AS role) = 'authenticated'::text)",
        "description": "PERMISSIVE policy \"Allow authenticated users to insert demo questions\" on demo_questions for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "demo_questions",
        "policyname": "Allow authenticated users to update demo questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(( SELECT auth.role() AS role) = 'authenticated'::text)",
        "with_check": "(( SELECT auth.role() AS role) = 'authenticated'::text)",
        "description": "PERMISSIVE policy \"Allow authenticated users to update demo questions\" on demo_questions for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "demo_questions",
        "policyname": "Allow public read access to active demo questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(is_active = true)",
        "with_check": null,
        "description": "PERMISSIVE policy \"Allow public read access to active demo questions\" on demo_questions for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "email_change_requests",
        "policyname": "email_change_requests_delete_optimized",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"email_change_requests_delete_optimized\" on email_change_requests for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "email_change_requests",
        "policyname": "email_change_requests_insert_optimized",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(user_id = ( SELECT auth.uid() AS uid))",
        "description": "PERMISSIVE policy \"email_change_requests_insert_optimized\" on email_change_requests for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "email_change_requests",
        "policyname": "email_change_requests_select_optimized",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"email_change_requests_select_optimized\" on email_change_requests for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "email_change_requests",
        "policyname": "email_change_requests_update_optimized",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"email_change_requests_update_optimized\" on email_change_requests for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "images",
        "policyname": "Admin can delete images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete images\" on images for DELETE to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "images",
        "policyname": "Admin can insert images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can insert images\" on images for INSERT to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "images",
        "policyname": "Admin can update images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update images\" on images for UPDATE to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "images",
        "policyname": "Allow public read access to images",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "true",
        "with_check": null,
        "description": "PERMISSIVE policy \"Allow public read access to images\" on images for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "inquiries",
        "policyname": "inquiries_admin_delete",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"inquiries_admin_delete\" on inquiries for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "inquiries",
        "policyname": "inquiries_admin_select",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"inquiries_admin_select\" on inquiries for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "inquiries",
        "policyname": "inquiries_admin_update",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"inquiries_admin_update\" on inquiries for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "inquiries",
        "policyname": "inquiries_insert_access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "true",
        "description": "PERMISSIVE policy \"inquiries_insert_access\" on inquiries for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "notification_states",
        "policyname": "Admin Full Access to Notification States Table",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "ALL",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin Full Access to Notification States Table\" on notification_states for ALL to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "performance_analytics",
        "policyname": "performance_analytics_delete",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"performance_analytics_delete\" on performance_analytics for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "performance_analytics",
        "policyname": "performance_analytics_insert",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR (user_id = ( SELECT auth.uid() AS uid)))",
        "description": "PERMISSIVE policy \"performance_analytics_insert\" on performance_analytics for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "performance_analytics",
        "policyname": "performance_analytics_select",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'reviewer'::text)))) OR (user_id = ( SELECT auth.uid() AS uid)))",
        "with_check": null,
        "description": "PERMISSIVE policy \"performance_analytics_select\" on performance_analytics for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "performance_analytics",
        "policyname": "performance_analytics_update",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR (user_id = ( SELECT auth.uid() AS uid)))",
        "with_check": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR (user_id = ( SELECT auth.uid() AS uid)))",
        "description": "PERMISSIVE policy \"performance_analytics_update\" on performance_analytics for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_analytics",
        "policyname": "question_analytics_admin_reviewer_select",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = ANY (ARRAY[('admin'::character varying)::text, ('reviewer'::character varying)::text])))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"question_analytics_admin_reviewer_select\" on question_analytics for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_analytics",
        "policyname": "question_analytics_system_insert",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "false",
        "description": "PERMISSIVE policy \"question_analytics_system_insert\" on question_analytics for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_analytics",
        "policyname": "question_analytics_system_update",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "false",
        "with_check": null,
        "description": "PERMISSIVE policy \"question_analytics_system_update\" on question_analytics for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_flags",
        "policyname": "Admins and reviewers can update flags",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = ANY (ARRAY[('admin'::character varying)::text, ('reviewer'::character varying)::text])))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admins and reviewers can update flags\" on question_flags for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_flags",
        "policyname": "Authenticated users can create flags",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((( SELECT auth.uid() AS uid) = flagged_by) AND (( SELECT auth.uid() AS uid) IS NOT NULL))",
        "description": "PERMISSIVE policy \"Authenticated users can create flags\" on question_flags for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_flags",
        "policyname": "Users can view question flags",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((( SELECT auth.uid() AS uid) IS NOT NULL) AND ((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = ANY (ARRAY[('admin'::character varying)::text, ('reviewer'::character varying)::text]))))) OR (flagged_by = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM questions\n  WHERE ((questions.id = question_flags.question_id) AND (questions.created_by = ( SELECT auth.uid() AS uid)))))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can view question flags\" on question_flags for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_images",
        "policyname": "Admin can delete question_images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete question_images\" on question_images for DELETE to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "question_images",
        "policyname": "Admin can insert question_images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can insert question_images\" on question_images for INSERT to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "question_images",
        "policyname": "Admin can update question_images",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update question_images\" on question_images for UPDATE to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "question_images",
        "policyname": "Allow public read access to question_images",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "true",
        "with_check": null,
        "description": "PERMISSIVE policy \"Allow public read access to question_images\" on question_images for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_options",
        "policyname": "Admin can delete question options",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete question options\" on question_options for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_options",
        "policyname": "Admin can manage question options",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can manage question options\" on question_options for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_options",
        "policyname": "Admin can update question options",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update question options\" on question_options for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_options",
        "policyname": "Question options read access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR ((( SELECT auth.role() AS role) = 'authenticated'::text) AND (EXISTS ( SELECT 1\n   FROM questions\n  WHERE ((questions.id = question_options.question_id) AND ((questions.status)::text = 'approved'::text))))) OR (EXISTS ( SELECT 1\n   FROM questions\n  WHERE ((questions.id = question_options.question_id) AND ((questions.status)::text = ANY (ARRAY[('published'::character varying)::text, ('approved'::character varying)::text]))))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Question options read access\" on question_options for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_reports",
        "policyname": "Admin Full Access to Question Reports Table",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "ALL",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin Full Access to Question Reports Table\" on question_reports for ALL to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "question_reviews",
        "policyname": "Admin can delete question reviews",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete question reviews\" on question_reviews for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_reviews",
        "policyname": "Admin can update question reviews",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update question reviews\" on question_reviews for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_reviews",
        "policyname": "Question reviews insert access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR ((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'reviewer'::text)))) AND (reviewer_id = ( SELECT auth.uid() AS uid)) AND (EXISTS ( SELECT 1\n   FROM questions q\n  WHERE ((q.id = question_reviews.question_id) AND ((q.status)::text = ANY (ARRAY[('pending'::character varying)::text, ('flagged'::character varying)::text])))))))",
        "description": "PERMISSIVE policy \"Question reviews insert access\" on question_reviews for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_reviews",
        "policyname": "Question reviews read access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'reviewer'::text)))) OR ((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'creator'::text)))) AND (EXISTS ( SELECT 1\n   FROM questions q\n  WHERE ((q.id = question_reviews.question_id) AND (q.created_by = ( SELECT auth.uid() AS uid)))))) OR (EXISTS ( SELECT 1\n   FROM questions q\n  WHERE ((q.id = question_reviews.question_id) AND ((q.status)::text = 'published'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Question reviews read access\" on question_reviews for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_tags",
        "policyname": "Admin Full Access to Question Tags Table",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "ALL",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin Full Access to Question Tags Table\" on question_tags for ALL to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "question_versions",
        "policyname": "question_versions_select",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR ((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'reviewer'::text)))) AND (EXISTS ( SELECT 1\n   FROM questions q\n  WHERE ((q.id = question_versions.question_id) AND ((q.status)::text = ANY (ARRAY[('draft'::character varying)::text, ('pending_review'::character varying)::text])))))) OR ((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'creator'::text)))) AND (EXISTS ( SELECT 1\n   FROM questions q\n  WHERE ((q.id = question_versions.question_id) AND (q.created_by = ( SELECT auth.uid() AS uid)))))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"question_versions_select\" on question_versions for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "question_versions",
        "policyname": "question_versions_system_insert",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "false",
        "description": "PERMISSIVE policy \"question_versions_system_insert\" on question_versions for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "questions",
        "policyname": "Admin can delete questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Admin can delete questions\" on questions for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "questions",
        "policyname": "Admin can manage questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can manage questions\" on questions for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "questions",
        "policyname": "Admin can update questions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update questions\" on questions for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "questions",
        "policyname": "Questions read access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))) OR ((status)::text = ANY (ARRAY[('published'::character varying)::text, ('approved'::character varying)::text])))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Questions read access\" on questions for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_attempts",
        "policyname": "Users can create attempts for their own quiz sessions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(EXISTS ( SELECT 1\n   FROM quiz_sessions\n  WHERE ((quiz_sessions.id = quiz_attempts.quiz_session_id) AND (quiz_sessions.user_id = ( SELECT auth.uid() AS uid)))))",
        "description": "PERMISSIVE policy \"Users can create attempts for their own quiz sessions\" on quiz_attempts for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_attempts",
        "policyname": "Users can delete their own quiz attempts",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(EXISTS ( SELECT 1\n   FROM quiz_sessions\n  WHERE ((quiz_sessions.id = quiz_attempts.quiz_session_id) AND (quiz_sessions.user_id = ( SELECT auth.uid() AS uid)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can delete their own quiz attempts\" on quiz_attempts for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_attempts",
        "policyname": "Users can update their own quiz attempts",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM quiz_sessions\n  WHERE ((quiz_sessions.id = quiz_attempts.quiz_session_id) AND (quiz_sessions.user_id = ( SELECT auth.uid() AS uid)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can update their own quiz attempts\" on quiz_attempts for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_attempts",
        "policyname": "Users can view their own quiz attempts",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(EXISTS ( SELECT 1\n   FROM quiz_sessions\n  WHERE ((quiz_sessions.id = quiz_attempts.quiz_session_id) AND (quiz_sessions.user_id = ( SELECT auth.uid() AS uid)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can view their own quiz attempts\" on quiz_attempts for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_sessions",
        "policyname": "Users can create their own quiz sessions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(( SELECT auth.uid() AS uid) = user_id)",
        "description": "PERMISSIVE policy \"Users can create their own quiz sessions\" on quiz_sessions for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_sessions",
        "policyname": "Users can delete their own quiz sessions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(( SELECT auth.uid() AS uid) = user_id)",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can delete their own quiz sessions\" on quiz_sessions for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_sessions",
        "policyname": "Users can update their own quiz sessions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(( SELECT auth.uid() AS uid) = user_id)",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can update their own quiz sessions\" on quiz_sessions for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "quiz_sessions",
        "policyname": "Users can view their own quiz sessions",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(( SELECT auth.uid() AS uid) = user_id)",
        "with_check": null,
        "description": "PERMISSIVE policy \"Users can view their own quiz sessions\" on quiz_sessions for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "sets",
        "policyname": "Admin Full Access to Question Sets Table",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "ALL",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin Full Access to Question Sets Table\" on sets for ALL to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "tags",
        "policyname": "Admin Full Access to Tags Table",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "ALL",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin Full Access to Tags Table\" on tags for ALL to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "user_activities",
        "policyname": "user_activities_delete_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_activities_delete_consolidated\" on user_activities for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_activities",
        "policyname": "user_activities_insert_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR ((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_activities_insert_consolidated\" on user_activities for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_activities",
        "policyname": "user_activities_select_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_activities_select_consolidated\" on user_activities for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_activities",
        "policyname": "user_activities_update_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_activities_update_consolidated\" on user_activities for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_favorites",
        "policyname": "Admin can update user favorites",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "with_check": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text))))",
        "description": "PERMISSIVE policy \"Admin can update user favorites\" on user_favorites for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_favorites",
        "policyname": "User favorites delete access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"User favorites delete access\" on user_favorites for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_favorites",
        "policyname": "User favorites insert access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"User favorites insert access\" on user_favorites for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_favorites",
        "policyname": "User favorites read access",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"User favorites read access\" on user_favorites for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_goals",
        "policyname": "user_goals_delete_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_goals_delete_consolidated\" on user_goals for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_goals",
        "policyname": "user_goals_insert_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_goals_insert_consolidated\" on user_goals for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_goals",
        "policyname": "user_goals_select_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_goals_select_consolidated\" on user_goals for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_goals",
        "policyname": "user_goals_update_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_goals_update_consolidated\" on user_goals for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_settings",
        "policyname": "user_settings_own_data",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "ALL",
        "qual": "(user_id = ( SELECT auth.uid() AS uid))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_settings_own_data\" on user_settings for ALL to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_study_activities",
        "policyname": "user_study_activities_delete_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_study_activities_delete_consolidated\" on user_study_activities for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_study_activities",
        "policyname": "user_study_activities_insert_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR ((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_study_activities_insert_consolidated\" on user_study_activities for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_study_activities",
        "policyname": "user_study_activities_select_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"user_study_activities_select_consolidated\" on user_study_activities for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "user_study_activities",
        "policyname": "user_study_activities_update_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": "((user_id = ( SELECT auth.uid() AS uid)) OR (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "description": "PERMISSIVE policy \"user_study_activities_update_consolidated\" on user_study_activities for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "policyname": "users_delete_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "DELETE",
        "qual": "(((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR is_current_user_admin())",
        "with_check": null,
        "description": "PERMISSIVE policy \"users_delete_consolidated\" on users for DELETE to public"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "policyname": "users_insert_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "(((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR true)",
        "description": "PERMISSIVE policy \"users_insert_consolidated\" on users for INSERT to public"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "policyname": "users_select_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "SELECT",
        "qual": "(((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR is_current_user_admin() OR (( SELECT auth.uid() AS uid) = id))",
        "with_check": null,
        "description": "PERMISSIVE policy \"users_select_consolidated\" on users for SELECT to public"
      },
      {
        "schemaname": "public",
        "tablename": "users",
        "policyname": "users_update_consolidated",
        "permissive": "PERMISSIVE",
        "roles": [
          "public"
        ],
        "cmd": "UPDATE",
        "qual": "(((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR is_current_user_admin() OR (( SELECT auth.uid() AS uid) = id))",
        "with_check": "(((( SELECT auth.jwt() AS jwt) ->> 'role'::text) = 'service_role'::text) OR is_current_user_admin() OR (( SELECT auth.uid() AS uid) = id))",
        "description": "PERMISSIVE policy \"users_update_consolidated\" on users for UPDATE to public"
      },
      {
        "schemaname": "public",
        "tablename": "waitlist",
        "policyname": "Allow admins to read waitlist",
        "permissive": "PERMISSIVE",
        "roles": [
          "authenticated"
        ],
        "cmd": "SELECT",
        "qual": "((( SELECT auth.role() AS role) = 'authenticated'::text) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = ( SELECT auth.uid() AS uid)) AND ((users.role)::text = 'admin'::text)))))",
        "with_check": null,
        "description": "PERMISSIVE policy \"Allow admins to read waitlist\" on waitlist for SELECT to authenticated"
      },
      {
        "schemaname": "public",
        "tablename": "waitlist",
        "policyname": "Allow anyone to insert into waitlist",
        "permissive": "PERMISSIVE",
        "roles": [
          "anon",
          "authenticated"
        ],
        "cmd": "INSERT",
        "qual": null,
        "with_check": "true",
        "description": "PERMISSIVE policy \"Allow anyone to insert into waitlist\" on waitlist for INSERT to anon, authenticated"
      }
    ]
  },
  {
    "object_type": "custom_types",
    "data": [
      {
        "type_name": "audit_logs",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "categories",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "demo_questions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "email_change_requests",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "images",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "inquiries",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "notification_states",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "performance_analytics",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_analytics",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_flags",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_images",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_options",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_reports",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_reviews",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_tags",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "question_versions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "questions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "quiz_attempts",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "quiz_sessions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "report_type",
        "schema_name": "public",
        "type_category": "E",
        "type_kind": "enum",
        "enum_values": [
          "incorrect_answer",
          "unclear_explanation",
          "broken_image",
          "inappropriate_content",
          "other"
        ]
      },
      {
        "type_name": "sets",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "tags",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_activities",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_category_stats",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_favorites",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_goals",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_settings",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "user_study_activities",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "users",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_creator_questions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_dashboard_stats",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_flagged_questions",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_image_usage_by_category",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_image_usage_stats",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_orphaned_images",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_review_queue",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_simplified_review_queue",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_storage_stats",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "v_user_stats",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      },
      {
        "type_name": "waitlist",
        "schema_name": "public",
        "type_category": "C",
        "type_kind": "composite",
        "enum_values": null
      }
    ]
  },
  {
    "object_type": "statistics",
    "data": {
      "total_tables": 28,
      "total_views": 10,
      "total_functions": 22,
      "total_triggers": 24,
      "total_policies": 86,
      "total_custom_types": 40,
      "database_size_bytes": 18395951,
      "timestamp": "2025-07-27T06:30:43.818011+00:00"
    }
  }
]