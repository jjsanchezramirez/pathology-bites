'use client'

import { useState } from 'react'
import { Button } from '@/shared/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/components/ui/select'
import { Badge } from '@/shared/components/ui/badge'
import { Loader2, Save, CheckCircle } from 'lucide-react'
import { toast } from 'sonner'
import { GeneratedQuestion, ImageAttachment } from '../create-question-v2-client'

interface QuestionFinalizationProps {
  question: GeneratedQuestion | null
  attachedImages: ImageAttachment[]
  onQuestionCreated: () => void
}

export function QuestionFinalization({ question, attachedImages, onQuestionCreated }: QuestionFinalizationProps) {
  const [selectedQuestionSet, setSelectedQuestionSet] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')
  const [isCreating, setIsCreating] = useState(false)

  // Mock data - replace with actual API calls
  const questionSets = [
    { id: '1', name: 'General Pathology Quiz 1' },
    { id: '2', name: 'Cell Biology Assessment' },
    { id: '3', name: 'Pathology Review Questions' }
  ]

  const categories = [
    { id: '1', name: 'General Pathology' },
    { id: '2', name: 'Systemic Pathology' },
    { id: '3', name: 'Clinical Pathology' }
  ]

  const handleCreateQuestion = async () => {
    if (!question) {
      toast.error('No question to create')
      return
    }

    if (!selectedQuestionSet || !selectedCategory) {
      toast.error('Please select question set and category')
      return
    }

    setIsCreating(true)

    try {
      // Prepare question data with finalization details
      const finalQuestion = {
        ...question,
        question_set_id: selectedQuestionSet,
        category_id: selectedCategory,
        question_images: attachedImages.map((img, index) => ({
          question_section: img.section,
          order_index: index,
          image_url: img.preview, // In real implementation, upload to storage first
          alt_text: img.alt_text,
          caption: img.caption
        }))
      }

      // Create question via API
      const response = await fetch('/api/admin/questions-create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(finalQuestion)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to create question')
      }

      const data = await response.json()
      
      toast.success('Question created successfully!')
      onQuestionCreated()

    } catch (error) {
      console.error('Question creation error:', error)
      toast.error(error instanceof Error ? error.message : 'Failed to create question')
    } finally {
      setIsCreating(false)
    }
  }

  if (!question) {
    return (
      <div className="text-center py-8 text-muted-foreground">
        <p>No question to finalize</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Question Summary */}
      <Card className="border-green-200 bg-green-50">
        <CardHeader>
          <CardTitle className="text-green-800 flex items-center gap-2">
            <CheckCircle className="h-5 w-5" />
            Question Ready for Creation
          </CardTitle>
          <CardDescription className="text-green-700">
            Review the final details and create your question
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <span className="font-medium">Title:</span> {question.title}
          </div>
          <div>
            <span className="font-medium">Difficulty:</span>{' '}
            <Badge variant="outline" className="capitalize bg-white">
              {question.difficulty}
            </Badge>
          </div>
          <div>
            <span className="font-medium">Answer Options:</span> {question.answer_options.length}
          </div>
          <div>
            <span className="font-medium">Attached Images:</span> {attachedImages.length}
          </div>
          <div>
            <span className="font-medium">Generated by:</span>{' '}
            <Badge variant="outline" className="bg-white">
              {question.metadata?.generated_by?.model}
            </Badge>
          </div>
        </CardContent>
      </Card>

      {/* Finalization Settings */}
      <Card>
        <CardHeader>
          <CardTitle>Question Assignment</CardTitle>
          <CardDescription>
            Assign the question to a question set and category
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Question Set</label>
              <Select value={selectedQuestionSet} onValueChange={setSelectedQuestionSet}>
                <SelectTrigger>
                  <SelectValue placeholder="Select question set" />
                </SelectTrigger>
                <SelectContent>
                  {questionSets.map((set) => (
                    <SelectItem key={set.id} value={set.id}>
                      {set.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Category</label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Source Content Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Source Content</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            <Badge variant="outline">
              {question.metadata?.source_content?.category}
            </Badge>
            <Badge variant="outline">
              {question.metadata?.source_content?.subject}
            </Badge>
            <Badge variant="outline">
              {question.metadata?.source_content?.lesson}
            </Badge>
            <Badge variant="outline">
              {question.metadata?.source_content?.topic}
            </Badge>
          </div>
        </CardContent>
      </Card>

      {/* Generation Metadata */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Generation Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm">
          <div>
            <span className="font-medium">Model:</span> {question.metadata?.generated_by?.model}
          </div>
          <div>
            <span className="font-medium">Provider:</span> {question.metadata?.generated_by?.provider}
          </div>
          {question.metadata?.generated_by?.response_time && (
            <div>
              <span className="font-medium">Response Time:</span> {question.metadata.generated_by.response_time}ms
            </div>
          )}
          <div>
            <span className="font-medium">Generated At:</span>{' '}
            {new Date(question.metadata?.exported_at || '').toLocaleString()}
          </div>
        </CardContent>
      </Card>

      {/* Create Button */}
      <div className="flex justify-end">
        <Button
          onClick={handleCreateQuestion}
          disabled={!selectedQuestionSet || !selectedCategory || isCreating}
          size="lg"
          className="min-w-[160px]"
        >
          {isCreating ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Creating Question...
            </>
          ) : (
            <>
              <Save className="h-4 w-4 mr-2" />
              Create Question
            </>
          )}
        </Button>
      </div>
    </div>
  )
}
